import { Player, Line, Motion, FreeDrawing, AnimationMode, CalculateFramesResult, RenderedPlayersResult } from "../types";
export function calculateTotalFrames(animationMode: AnimationMode, speedSlider: number, base: number): CalculateFramesResult { if (!animationMode) { return { totalRouteFrames: 0, totalMotionFrames: 0, totalFrames: 0 }; } const factor = Math.max(0.2, Math.min(5, speedSlider)); const totalRouteFrames = base; const totalMotionFrames = base; let totalFrames = 0; if (animationMode === "routes") totalFrames = totalRouteFrames; else if (animationMode === "motions") totalFrames = totalMotionFrames; else totalFrames = Math.max(totalRouteFrames, totalMotionFrames); totalFrames = Math.floor(totalFrames / factor); return { totalRouteFrames, totalMotionFrames, totalFrames }; }
function lerp(a: number, b: number, t: number) { return a + (b - a) * t; }
function interpolatePath(points: { x: number; y: number }[], frame: number, total: number) { if (points.length === 0) return null; if (points.length === 1) return points[0]; const segments = points.length - 1; const tGlobal = total === 0 ? 1 : frame / total; const t = Math.min(1, Math.max(0, tGlobal)); const segFloat = t * segments; const segIndex = Math.min(segments - 1, Math.floor(segFloat)); const localT = segFloat - segIndex; const pA = points[segIndex]; const pB = points[segIndex + 1]; return { x: lerp(pA.x, pB.x, localT), y: lerp(pA.y, pB.y, localT) }; }
export function calculateRenderedPlayers(players: Player[], lines: Line[], motions: Motion[], freeDrawings: FreeDrawing[], sliderFrame: number, totalMotionFrames: number, totalRouteFrames: number, animationMode: AnimationMode): RenderedPlayersResult { const playerRouteTypes: Record<number, string | null> = {}; const renderedPlayers = players.map((p) => ({ ...p })); if (!animationMode) { lines.forEach((l) => (playerRouteTypes[l.playerId] = l.type)); return { renderedPlayers, playerRouteTypes }; } renderedPlayers.forEach((pl) => { const line = lines.find((l) => l.playerId === pl.id); const motion = motions.find((m) => m.playerId === pl.id); if ((animationMode === "routes" || animationMode === "all") && line && totalRouteFrames > 0) { const ip = interpolatePath(line.points, sliderFrame, totalRouteFrames); if (ip) { pl.x = ip.x; pl.y = ip.y; playerRouteTypes[pl.id] = line.type; } } if ((animationMode === "motions" || animationMode === "all") && motion && totalMotionFrames > 0) { const ip = interpolatePath(motion.points, sliderFrame, totalMotionFrames); if (ip) { pl.x = ip.x; pl.y = ip.y; } } }); return { renderedPlayers, playerRouteTypes }; }